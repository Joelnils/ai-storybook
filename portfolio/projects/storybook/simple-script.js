// Simple Story Generation Script - No Auth, No Payment
document.addEventListener('DOMContentLoaded', function() {
    initializeSimpleStorybook();
});

function initializeSimpleStorybook() {
    console.log('üåü Simple AI Storybook Creator initialized');
    
    // Setup form handler
    const storyForm = document.getElementById('storyForm');
    if (storyForm) {
        storyForm.addEventListener('submit', handleSimpleStoryGeneration);
    }
    
    // Setup theme selection
    setupThemeSelection();
    
    // Setup demo stories
    setupDemoStories();
    
    // Test API connection
    testAPIConnection();
}

async function testAPIConnection() {
    try {
        const health = await simpleAPI.healthCheck();
        console.log('‚úÖ API connection successful:', health);
    } catch (error) {
        console.error('‚ùå API connection failed:', error);
        showError('Kunde inte ansluta till servern. Kontrollera att backend k√∂rs p√• port 3001.');
    }
}

// Handle story generation with payment (with development mode fallback)
async function handleSimpleStoryGeneration(event) {
    event.preventDefault();
    
    // Get form data
    const formData = new FormData(event.target);
    const storyData = {
        title: formData.get('storyTitle'),
        childName: formData.get('childName'),
        childAge: formData.get('childAge'),
        theme: getSelectedTheme(),
        parentEmail: formData.get('parentEmail'),
        details: formData.get('storyDetails')
    };
    
    // Validate form
    if (!validateStoryForm(storyData)) {
        return;
    }
    
    try {
        // Store email for success page
        localStorage.setItem('customerEmail', storyData.parentEmail);
        
        // Show payment processing
        showProgressiveLoading();
        updateLoadingProgress('F√∂rbereder betalning...', 0);
        
        // Try to create payment intent
        const paymentResponse = await simpleAPI.createPaymentIntent(storyData);
        
        if (!paymentResponse.success) {
            throw new Error(paymentResponse.error || 'Failed to create payment');
        }
        
        updateLoadingProgress('Omdirigerar till betalning...', 1);
        
        // Redirect to Stripe Checkout URL
        window.location.href = paymentResponse.url;
        
    } catch (error) {
        hideLoading();
        console.error('‚ùå Payment setup failed:', error);
        
        // Check if it's a Stripe API key error (development mode)
        if (error.message.includes('You did not provide an API key')) {
            const userChoice = confirm(
                'üöß UTVECKLINGSL√ÑGE üöß\n\n' +
                'Stripe API-nycklarna √§r inte konfigurerade √§n.\n\n' +
                'Vill du testa sagogenerering utan betalning?\n\n' +
                'Klicka OK f√∂r att skapa saga OCH skicka via email\n' +
                'Klicka Avbryt f√∂r att bara visa i webbl√§saren\n\n' +
                '(Detta √§r bara f√∂r utveckling och testning)'
            );
            
            if (userChoice !== null) {
                await handleDevelopmentStoryGeneration(storyData, userChoice);
                return;
            }
        }
        
        showError('Det gick inte att f√∂rbereda betalningen: ' + error.message);
    }
}

// Development mode story generation (without payment)
async function handleDevelopmentStoryGeneration(storyData, sendEmail = false) {
    try {
        console.log('üöß Running in development mode - no payment required');
        console.log('üìß Send email:', sendEmail);
        
        // Show story generation progress
        console.log('üì± About to show progressive loading...');
        showProgressiveLoading();
        console.log('üì± Progressive loading function called');
        
        if (sendEmail) {
            updateLoadingProgress('Skapar din ber√§ttelse och f√∂rbereder email... (utvecklingsl√§ge)', 0);
            
            console.log('üöÄ Starting API call for story generation...');
            
            // Generate story with email
            const result = await simpleAPI.generateStoryWithEmail(storyData);
            
            console.log('‚úÖ API call completed, hiding loading...');
            
            // Hide loading immediately after completion
            hideLoading();
            
            // Show story result
            displayStoryResult(result.story);
            
            // Show success message
            setTimeout(() => {
                alert('üöß UTVECKLINGSL√ÑGE üöß\n\n' +
                      '‚úÖ Din saga har skapats och skickats!\n\n' +
                      `üìß Email skickat till: ${storyData.parentEmail}\n\n` +
                      'I produktionsl√§get skulle detta kosta 50 kr.');
            }, 1000);
            
        } else {
            updateLoadingProgress('Skapar din ber√§ttelse... (utvecklingsl√§ge)', 0);
            
            // Generate story for browser only
            const result = await simpleAPI.generateStory(storyData);
            
            // Hide loading immediately after completion
            hideLoading();
            
            // Show story result
            displayStoryResult(result.story);
            
            // Show development notice
            setTimeout(() => {
                alert('üöß UTVECKLINGSL√ÑGE üöß\n\n' +
                      'Din saga har skapats f√∂r testning (endast i webbl√§saren).\n\n' +
                      'I produktionsl√§get skulle detta kosta 50 kr och skickas via email.');
            }, 1000);
        }
        
    } catch (error) {
        hideLoading();
        console.error('‚ùå Development story generation failed:', error);
        
        // Check if it's an email error
        if (error.message.includes('getaddrinfo ENOTFOUND') || error.message.includes('Authentication failed')) {
            showError('Email kunde inte skickas (Gmail inte konfigurerat). Sagan skapades √§nd√• i webbl√§saren.');
        } else {
            showError('Det gick inte att skapa sagan i utvecklingsl√§ge: ' + error.message);
        }
    }
}

function validateStoryForm(data) {
    if (!data.title) {
        showError('V√§nligen ange en titel f√∂r sagan.');
        return false;
    }
    
    if (!data.childName) {
        showError('V√§nligen ange barnets namn.');
        return false;
    }
    
    if (!data.childAge) {
        showError('V√§nligen v√§lj barnets √•lder.');
        return false;
    }
    
    if (!data.theme) {
        showError('V√§nligen v√§lj ett tema f√∂r sagan.');
        return false;
    }
    
    if (!data.parentEmail) {
        showError('V√§nligen ange f√∂r√§lderns email.');
        return false;
    }
    
    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(data.parentEmail)) {
        showError('V√§nligen ange en giltig email-adress.');
        return false;
    }
    
    return true;
}

function setupThemeSelection() {
    const themeOptions = document.querySelectorAll('.theme-option');
    
    themeOptions.forEach(option => {
        option.addEventListener('click', function() {
            // Remove selected class from all options
            themeOptions.forEach(opt => opt.classList.remove('selected'));
            
            // Add selected class to clicked option
            this.classList.add('selected');
            
            console.log('Theme selected:', this.dataset.theme);
        });
    });
}

function getSelectedTheme() {
    const selectedTheme = document.querySelector('.theme-option.selected');
    return selectedTheme ? selectedTheme.dataset.theme : null;
}

function showLoading(message = 'Laddar...') {
    const loadingElement = document.getElementById('loadingAnimation');
    const loadingText = loadingElement.querySelector('.loading-text');
    
    if (loadingText) {
        loadingText.textContent = message;
    }
    
    // Force show with inline styles
    loadingElement.style.display = 'flex';
    loadingElement.style.position = 'fixed';
    loadingElement.style.top = '0';
    loadingElement.style.left = '0';
    loadingElement.style.width = '100vw';
    loadingElement.style.height = '100vh';
    loadingElement.style.background = 'rgba(0, 0, 0, 0.8)';
    loadingElement.style.zIndex = '999999';
    loadingElement.style.justifyContent = 'center';
    loadingElement.style.alignItems = 'center';
    loadingElement.style.flexDirection = 'column';
    
    // Hide other sections
    document.getElementById('create').style.display = 'none';
    
    console.log('üîç Loading shown with display:', loadingElement.style.display);
}

function hideLoading() {
    const loadingElement = document.getElementById('loadingAnimation');
    
    // Force hide with inline styles
    loadingElement.style.display = 'none';
    loadingElement.classList.remove('show');
    
    // Show form section again
    document.getElementById('create').style.display = 'block';
    
    // Clear any pending progress updates
    window.storyGenerationComplete = true;
    
    console.log('üìù Loading hidden - display set to:', loadingElement.style.display);
}

function displayStoryResult(story, isDemo = false) {
    const resultSection = document.getElementById('storyResult');
    const titleElement = document.getElementById('generatedTitle');
    const subtitleElement = document.getElementById('generatedSubtitle');
    const contentElement = document.getElementById('storyContent');
    
    // Set title and subtitle
    titleElement.textContent = story.title;
    subtitleElement.textContent = `En personlig saga f√∂r ${story.childName}`;
    
    // Display story content with images
    displayStoryWithImages(story, contentElement);
    
    // Hide download/share buttons for demo stories
    const storyActions = resultSection.querySelector('.story-actions');
    const downloadBtns = storyActions.querySelectorAll('.download-btn');
    
    if (isDemo) {
        // Hide PDF, EPUB, and Share buttons for demos
        downloadBtns.forEach(btn => {
            if (btn.textContent.includes('Ladda ner') || btn.textContent.includes('Dela')) {
                btn.style.display = 'none';
            }
        });
    } else {
        // Show all buttons for regular stories
        downloadBtns.forEach(btn => {
            btn.style.display = 'inline-block';
        });
    }
    
    // Show result section
    resultSection.style.display = 'block';
    resultSection.scrollIntoView({ behavior: 'smooth' });
    
    // Store story for PDF generation
    window.currentStory = story;
}

function displayStoryWithImages(story, container) {
    container.innerHTML = '';
    
    const paragraphs = story.content.split('\n\n').filter(p => p.trim());
    
    paragraphs.forEach((paragraph, index) => {
        // Create page container
        const pageDiv = document.createElement('div');
        pageDiv.className = 'story-page';
        
        // Add image for this page
        const storyImage = story.images.find(img => img.position === index);
        if (storyImage) {
            const imgElement = document.createElement('img');
            imgElement.src = storyImage.url;
            imgElement.alt = `Illustration f√∂r sida ${index + 1}`;
            imgElement.className = 'story-image';
            imgElement.style.maxWidth = '100%';
            imgElement.style.borderRadius = '12px';
            imgElement.style.marginBottom = '20px';
            
            pageDiv.appendChild(imgElement);
        }
        
        // Add paragraph text
        const textDiv = document.createElement('div');
        textDiv.className = 'story-text';
        textDiv.innerHTML = `<p>${paragraph.trim()}</p>`;
        pageDiv.appendChild(textDiv);
        
        container.appendChild(pageDiv);
    });
}

// PDF Download Function
async function downloadPDF() {
    try {
        if (!window.currentStory) {
            showError('Ingen saga att ladda ner.');
            return;
        }
        
        showLoading('Skapar PDF... üìÑ');
        
        const pdf = await simpleAPI.createPDF(window.currentStory);
        pdf.save(`${window.currentStory.title} - ${window.currentStory.childName}.pdf`);
        
        hideLoading();
        
    } catch (error) {
        hideLoading();
        console.error('‚ùå PDF download error:', error);
        showError('Det gick inte att skapa PDF:en: ' + error.message);
    }
}

// EPUB Download (placeholder)
function downloadEPUB() {
    showError('EPUB-export kommer snart! Anv√§nd PDF-nedladdning f√∂r tillf√§llet.');
}

// Share Story (placeholder)
function shareStory() {
    if (navigator.share && window.currentStory) {
        navigator.share({
            title: window.currentStory.title,
            text: `Kolla in den h√§r AI-skapade sagan: ${window.currentStory.title}`,
            url: window.location.href
        });
    } else {
        // Fallback
        const text = `Kolla in den h√§r AI-skapade sagan: ${window.currentStory.title}`;
        navigator.clipboard.writeText(text).then(() => {
            alert('L√§nk kopierad till urklipp!');
        });
    }
}

// Create New Story
function createNewStory() {
    // Reset form
    document.getElementById('storyForm').reset();
    
    // Clear theme selection
    document.querySelectorAll('.theme-option').forEach(opt => opt.classList.remove('selected'));
    
    // Hide result
    document.getElementById('storyResult').style.display = 'none';
    
    // Clear stored story
    window.currentStory = null;
    
    // Scroll to form
    document.getElementById('create').scrollIntoView({ behavior: 'smooth' });
}

// Test function for loading modal
function testLoadingModal() {
    console.log('üß™ Testing loading modal...');
    
    // Check if loading element exists
    const loadingElement = document.getElementById('loadingAnimation');
    console.log('üîç Loading element found:', !!loadingElement);
    
    if (loadingElement) {
        console.log('üîç Loading element HTML:', loadingElement.outerHTML.substring(0, 200));
        console.log('üîç Current display:', window.getComputedStyle(loadingElement).display);
        console.log('üîç Current classes:', loadingElement.className);
        
        // Force show with all methods
        loadingElement.style.display = 'flex';
        loadingElement.style.position = 'fixed';
        loadingElement.style.top = '0';
        loadingElement.style.left = '0';
        loadingElement.style.width = '100vw';
        loadingElement.style.height = '100vh';
        loadingElement.style.background = 'rgba(255, 0, 0, 0.9)';
        loadingElement.style.zIndex = '999999';
        loadingElement.classList.add('show');
        
        console.log('üîç After forcing show:', window.getComputedStyle(loadingElement).display);
    } else {
        console.error('‚ùå Loading element not found in DOM!');
    }
    
    setTimeout(() => {
        console.log('üß™ Test completed');
        if (loadingElement) {
            loadingElement.style.display = 'none';
        }
    }, 5000);
}

// Make test function available globally
window.testLoadingModal = testLoadingModal;

// Demo Stories Data
const demoStories = {
    'j√§ttefisken': {
        title: 'Sagan om J√§ttefisken',
        childName: 'Mia',
        content: `Mia stod vid havets kant, tittade ut √∂ver det skimrande vattnet och undrade vad som fanns under ytan. Idag var dagen d√• hon skulle f√• reda p√• det. Utstyrd med simf√∂tter, dykmask och snorkel tog hon sina f√∂rsta f√∂rsiktiga simtag mot √§ventyret.

Medan Mia utforskade det underbara korallriket, m√∂tte hon f√§rgglada fiskar som lekte i vattnet. Hon sv√§vade f√∂rbi anemoner som vajade mjukt i str√∂mmarna och uppt√§ckte skimrande sj√∂stj√§rnor p√• mjuka sandbottnar. D√• s√•g hon n√•got stort som r√∂rde sig i det bl√•.

En enorm j√§ttefisk, med fj√§ll som skimrade i alla regnb√•gens f√§rger, simmade lugnt fram till henne. Mia k√§nde f√∂rst en r√§dsla, men j√§ttefiskens v√§nliga √∂gon visade att den bara var nyfiken. "Hej, jag heter Mia," sa hon. "Och jag √§r en j√§ttefisk," svarade den med en r√∂st som var djup och mild.

J√§ttefisken visade Mia runt i havets underverk. De simmade genom hemliga passager, f√∂rbi gamla skeppsvrak och utforskade koralltr√§dg√•rdar som Mia aldrig hade kunnat f√∂rest√§lla sig. "Havet √§r fullt av hemligheter," sa j√§ttefisken. "Och v√§nskap √§r den st√∂rsta skatten."

N√§r solen b√∂rjade sjunka mot horisonten, visste Mia att det var dags att √•terv√§nda. J√§ttefisken vinkade farv√§l med sin stora stj√§rtfena. "Kom tillbaka snart," sa den. Mia simmade tillbaka till stranden, fylld av tacksamhet och under √∂ver de magiska √§ventyren hon upplevt.

Mia satt p√• stranden och tittade ut √∂ver havet i skymningen. Hon visste att hon alltid skulle b√§ra med sig minnet av j√§ttefisken och de hemliga undervattensv√§rldarna. Och hon visste att mer √§ventyr v√§ntade, bara hon var modig nog att dyka in i det ok√§nda.`,
        illustrations: []
    },
    'prinsessan': {
        title: 'Prinsessan och Stj√§rnan',
        childName: 'Livia',
        content: `Det var en g√•ng en modig liten prinsessa vid namn Livia. Hon √§lskade att springa runt i det kungliga slottets stora tr√§dg√•rd och dr√∂mma om √§ventyr. Men mest av allt √§lskade hon att titta p√• stj√§rnhimlen n√§r m√∂rkret hade lagt sig och allt var tyst.

En kv√§ll, n√§r Livia l√•g i gr√§set och betraktade stj√§rnorna, s√•g hon en som blinkade s√§rskilt klart. Pl√∂tsligt, med ett svagt ljud, f√∂ll den blinkande stj√§rnan fr√•n himlen och landade alldeles intill henne. Livia blev f√∂rst lite r√§dd, men hennes nyfikenhet vann √∂ver r√§dslan och hon gick n√§rmare f√∂r att unders√∂ka.

Vid foten av ett gammalt √§ppeltr√§d l√•g en liten ljusglimt, det var den fallna stj√§rnan. Livia str√§ckte f√∂rsiktigt ut handen och till hennes f√∂rv√•ning b√∂rjade stj√§rnan vibrera och blev till en liten flicka, lika vacker och skimrande som en stj√§rna. Flickan presenterade sig som Stella och ber√§ttade att hon var en stj√§rna som hade fallit ner p√• jorden.

Stella var ledsen f√∂r hon visste inte hur hon skulle komma tillbaka till stj√§rnhimlen. Livia lovade att hon skulle hj√§lpa henne. Trots att hon var os√§ker p√• hur, visste hon att v√§nliga handlingar alltid leder till l√∂sningar. Tillsammans begav de sig ut p√• ett √§ventyr f√∂r att hitta ett s√§tt att f√∂ra Stella tillbaka till himlen.

Under deras √§ventyr st√∂tte de p√• m√•nga utmaningar, men Livia var alltid d√§r f√∂r att hj√§lpa Stella. Hon anv√§nde sin klokhet och sitt mod f√∂r att l√∂sa problemen de st√∂tte p√•. Hon visade att man inte beh√∂ver vara stor f√∂r att g√∂ra stora saker, och att mod inte handlar om att vara or√§dd, utan om att g√∂ra det r√§tta trots att man √§r r√§dd.

Till slut, efter m√•nga √§ventyr, fann de en gammal trollkarl som visste hur man kunde skicka Stella tillbaka till stj√§rnhimlen. Livia k√§nde sig ledsen √∂ver att beh√∂va s√§ga hejd√• till sin nya v√§n, men hon visste att det var det r√§tta att g√∂ra. N√§r Stella √•terv√§nde till himlen, blev hon den klaraste stj√§rnan p√• natthimlen, alltid p√•minnande Livia om deras √§ventyr tillsammans.`,
        illustrations: []
    },
    'robotkatten': {
        title: 'Robotkatten Max',
        childName: 'Tom',
        content: `Tom satt i sitt rum och ritade n√§r hans mamma kom in med en l√•da. 'Det h√§r √§r till dig, Tom,' sa hon med ett leende. Tom tittade nyfiket p√• l√•dan.

N√§r Tom √∂ppnade l√•dan hoppade en liten robotkatt ut. Den blinkade glatt med sina gr√∂na √∂gon. 'Hej, jag heter Max!' sa den med en mjuk r√∂st. Tom skrattade. Han hade aldrig sett n√•got liknande. 'Hej, Max!' svarade han.

Dagen efter tog Tom med sig Max till parken. Max sprang runt och utforskade allt med stor entusiasm. 'Du √§r s√• snabb!' sade Tom och skrattade. De spelade tills solen b√∂rjade g√• ner.

En dag n√§r de var i parken tr√§ffade de Lisa, en flicka fr√•n Toms skola. 'Vad √§r det d√§r?' fr√•gade hon och pekade p√• Max. Tom f√∂rklarade att Max var en robotkatt. Lisa log. 'Han √§r j√§ttecool. F√•r jag leka med er?' Tom tittade p√• Max, som blinkade glatt. 'Sj√§lvklart,' svarade Tom.

Tillsammans hade de √§nnu roligare. Lisa l√§rde Max att kasta boll, och Max f√∂rs√∂kte l√§ra Lisa att springa lika snabbt som han. De skrattade och lekte tills det blev dags att g√• hem.

Dagen efter i skolan kom fler barn fram till Tom och fr√•gade om Max. Tom k√§nde sig stolt och glad √∂ver att ha en s√• unik v√§n. Han ins√•g att v√§nskap inte handlar om hur man ser ut eller var man kommer ifr√•n, utan om omtanke och gl√§dje man delar med andra.

Fr√•n den dagen var Tom och Max aldrig ensamma. De hade l√§rt sig att v√§nskap v√§xer n√§r man delar den med andra. Och Max, √§ven om han var en robot, hade ett hj√§rta fullt av v√§rme och v√§nlighet.`,
        illustrations: []
    },
    'magiska-skogen': {
        title: 'Den Magiska Skogen',
        childName: 'Emil',
        content: `En solig morgon best√§mde sig Emil f√∂r att utforska skogen bakom sitt hus. Han hade alltid varit nyfiken p√• vad som fanns d√§rinne, men idag k√§nde han sig s√§rskilt √§ventyrslysten.

N√§r han gick djupare in i skogen, b√∂rjade tr√§den skimra i m√§rkliga f√§rger, och blommorna lyste som sm√• lyktor. Emil var f√∂rundrad och k√§nde sig som om han stigit in i en annan v√§rld.

Pl√∂tsligt h√∂rde han en r√∂st som sa, "Hej! Vem √§r du?" Emil tittade ner och s√•g en liten talande ekorre. Han svarade, "Jag heter Emil. √Ñr du en magisk ekorre?" Ekorren nickade och sa, "Alla vi h√§r i den magiska skogen kan prata! F√∂lj med, s√• f√•r du tr√§ffa mina v√§nner!"

Ekorren f√∂rde Emil till en klar gl√§nta d√§r fler djur v√§ntade. Det fanns en bj√∂rn, en r√§v, och till och med en hjort som alla h√§lsade p√• Emil med v√§nliga r√∂ster. Emil kunde knappt tro sina √∂gon!

Djuren ber√§ttade f√∂r Emil om skogens magi, hur de alla lever i harmoni och hj√§lper varandra. Emil l√§rde sig om vikten av v√§nskap och att dela med sig. Han k√§nde sig glad och varm inombords.

Innan det blev dags f√∂r Emil att g√• hem, planterade han en blomma tillsammans med djuren. De sa att blomman skulle v√§xa och p√•minna dem alla om deras nya v√§nskap.

Emil vandrade hem√•t, fylld med gl√§dje och ber√§ttelser att dela med sin familj. Han visste att han alltid skulle vara v√§lkommen tillbaka till den magiska skogen, d√§r v√§nskap blomstrade och √§ventyren aldrig tog slut.`,
        illustrations: []
    },
    'r√§ven': {
        title: 'Sagan om R√§ven',
        childName: 'Joel',
        content: `Joel gick genom den tjocka skogen en solig eftermiddag, nyfiken p√• vad han skulle uppt√§cka. Tr√§den skapade ett gr√∂nt tak √∂ver honom, och f√•glarnas s√•ng fyllde luften med melodi.

Pl√∂tsligt h√∂rde han ett svagt gn√§ll fr√•n en buske. Joel tittade n√§rmare och s√•g en liten r√§vunge som satt fast under en gren. F√∂rsiktigt lyfte Joel grenen och befriade den lilla r√§ven. "Tack s√• mycket," sa r√§vungen med en pip. "Jag heter R√∂dis."

Joel och R√∂dis blev snabbt v√§nner. R√∂dis visade Joel hemliga stigar genom skogen som endast djuren k√§nde till. De lekte kurrag√∂mma bland tr√§den och delade b√§r som de plockade l√§ngs v√§gen.

En dag, n√§r de utforskade en ny del av skogen, blev de vilse. Joel k√§nde sig orolig, men R√∂dis sa lugnt, "Oroa dig inte, Joel. Vi kan anv√§nda v√•ra sinnen f√∂r att hitta v√§gen hem." Tillsammans anv√§nde de ljud, dofter och ledtr√•dar fr√•n naturen f√∂r att navigera.

Efter en l√•ng dag av √§ventyr hittade de till slut tillbaka. Joel ins√•g hur viktig v√§nskap var och hur mycket han l√§rt sig fr√•n sin nya v√§n. R√∂dis hade l√§rt honom att lita p√• naturen och sina egna f√∂rm√•gor.

Fr√•n den dagen bes√∂kte Joel skogen ofta f√∂r att tr√§ffa R√∂dis. Deras v√§nskap v√§xte starkare f√∂r varje √§ventyr de delade. Joel l√§rde sig att de b√§sta v√§nnerna kan komma fr√•n de mest ov√§ntade st√§llen.

Varje g√•ng Joel k√§nde sig ensam eller os√§ker, t√§nkte han p√• R√∂dis och deras √§ventyr i skogen. Han f√∂rstod att v√§nskap och mod kan hj√§lpa en att √∂vervinna alla utmaningar som livet f√∂r med sig.`,
        illustrations: []
    },
    'enh√∂rning': {
        title: 'Enh√∂rningen och Regnb√•gen',
        childName: 'Saga',
        content: `Saga √§lskade att titta p√• himlen efter regnet och v√§nta p√• regnb√•gar. En dag, n√§r hon satt i tr√§dg√•rden efter en kraftig regnskur, s√•g hon n√•got magiskt - en vit enh√∂rning som gick l√§ngs regnb√•gens kant.

Enh√∂rningen, som hette Luna, hade en gl√§nsande mane och ett horn som skimrade i alla regnb√•gens f√§rger. "Hej, Saga," sa Luna med en mjuk r√∂st. "Jag har sett dig titta p√• regnb√•garna. Vill du l√§ra dig deras hemlighet?"

Luna tog Saga p√• en resa l√§ngs regnb√•gen. De vandrade √∂ver molnen och s√•g v√§rlden fr√•n ovan. "Varje f√§rg p√• regnb√•gen har sin egen magi," f√∂rklarade Luna. "R√∂d f√∂r k√§rlek, orange f√∂r gl√§dje, gul f√∂r hopp, gr√∂n f√∂r naturen, bl√• f√∂r frid, lila f√∂r visdom."

De tr√§ffade andra magiska varelser som bodde i molnen - fj√§rilar som m√•lade himlen och f√•glar som sj√∂ng melodier som blev till regn. Saga l√§rde sig att varje regnskur var en f√∂rberedelse f√∂r n√•got vackert.

N√§r det blev dags att √•terv√§nda, gav Luna Saga en liten kristall som skimrade i regnb√•gens f√§rger. "Den h√§r p√•minner dig om att efter varje m√∂rk stund kommer ljus och sk√∂nhet," sa Luna.

Fr√•n den dagen, varje g√•ng det regnade, log Saga och v√§ntade ivrigt p√• regnb√•gen. Hon visste att Luna var d√§r n√•gonstans och att magi fanns √∂verallt omkring henne, bara hon hade √∂gon att se det.

Saga l√§rde sig att √§ven de sv√•raste dagarna kan leda till n√•got vackert, precis som regnet leder till regnb√•gar. Och med Lunas kristall i handen k√§nde hon sig alltid trygg och full av hopp om framtiden.`,
        illustrations: []
    }
};

// Demo Stories
function setupDemoStories() {
    console.log('üìö Demo stories loaded:', Object.keys(demoStories).length, 'stories');
}

async function readDemoStory(storyId) {
    console.log('üìñ Reading demo story:', storyId);
    
    const story = demoStories[storyId];
    if (!story) {
        showError('Demo-saga hittades inte: ' + storyId);
        return;
    }
    
    // Create story data in the same format as generated stories
    const paragraphs = story.content.split('\n\n').map(p => p.trim()).filter(p => p.length > 0);
    
    // Check if demo images exist, if not generate them
    const imageExists = await checkDemoImageExists(storyId, 0);
    
    if (!imageExists) {
        console.log('üé® Demo images not found, generating...');
        showLoading('Genererar illustrationer f√∂r demo-sagan... üé®');
        
        try {
            await simpleAPI.generateDemoImages(storyId, story.title, story.content);
            hideLoading();
            console.log('‚úÖ Demo images generated successfully');
        } catch (error) {
            hideLoading();
            console.warn('Could not generate demo images:', error);
            // Continue anyway with placeholder images
        }
    }
    
    // Format story for display
    const storyData = {
        title: story.title,
        childName: story.childName,
        content: story.content,
        images: paragraphs.map((_, index) => ({
            position: index,
            url: `http://localhost:3001/uploads/images/demo_${storyId}_${index}.png`,
            description: `Illustration f√∂r ${story.title} - Sida ${index + 1}`
        }))
    };
    
    // Display the demo story (with isDemo = true to hide download buttons)
    displayStoryResult(storyData, true);
    
    // Store as current story for PDF download
    window.currentStory = storyData;
}

// Check if demo image exists
async function checkDemoImageExists(storyId, imageIndex) {
    try {
        const response = await fetch(`http://localhost:3001/uploads/images/demo_${storyId}_${imageIndex}.png`, { method: 'HEAD' });
        return response.ok;
    } catch (error) {
        return false;
    }
}

// Error handling
function showError(message) {
    alert('‚ùå ' + message);
    console.error('Error:', message);
}

// Success messages
function showSuccess(message) {
    alert('‚úÖ ' + message);
    console.log('Success:', message);
}

// Progressive loading with status updates
function showProgressiveLoading() {
    // Reset completion flag
    window.storyGenerationComplete = false;
    
    const loadingElement = document.getElementById('loadingAnimation');
    const loadingText = loadingElement.querySelector('.loading-text');
    const loadingSubtext = loadingElement.querySelector('.loading-subtext');
    
    if (!loadingElement) {
        console.error('‚ùå Loading element not found!');
        return;
    }
    
    if (loadingText) {
        loadingText.textContent = 'Skriver din ber√§ttelse... ‚ú®';
    }
    
    if (loadingSubtext) {
        loadingSubtext.textContent = 'Detta tar n√•gra minuter - AI skapar din personliga saga';
    }
    
    // Force show with all inline styles
    loadingElement.style.display = 'flex';
    loadingElement.style.position = 'fixed';
    loadingElement.style.top = '0';
    loadingElement.style.left = '0';
    loadingElement.style.width = '100vw';
    loadingElement.style.height = '100vh';
    loadingElement.style.background = 'rgba(0, 0, 0, 0.8)';
    loadingElement.style.zIndex = '999999';
    loadingElement.style.justifyContent = 'center';
    loadingElement.style.alignItems = 'center';
    loadingElement.style.flexDirection = 'column';
    
    // Hide form section  
    document.getElementById('create').style.display = 'none';
    
    console.log('üìù Progressive loading started and made visible');
    console.log('üîç Loading element display:', loadingElement.style.display);
    console.log('üîç Loading element position:', loadingElement.style.position);
}

function updateLoadingProgress(message, step) {
    // Don't update progress if story generation is complete
    if (window.storyGenerationComplete) {
        console.log('üö´ Skipping progress update - story complete');
        return;
    }
    
    const loadingText = document.querySelector('#loadingAnimation .loading-text');
    const loadingSubtext = document.querySelector('#loadingAnimation .loading-subtext');
    const loadingElement = document.getElementById('loadingAnimation');
    
    // Only update if loading element should be visible
    if (loadingElement && loadingElement.style.display === 'flex') {
        console.log(`üìä Updating progress: ${message} (step ${step})`);
        
        if (loadingText) {
            loadingText.textContent = message;
            console.log(`üìù Updated text: ${message}`);
        } else {
            console.warn('‚ùå Loading text element not found');
        }
        
        const progressMessages = [
            'Skapar din personliga saga...',
            'Genererar illustrationer med AI...',
            'S√§tter samman din sagbok...',
            'N√§stan klar...'
        ];
        
        const subtextMessages = [
            'AI skriver text baserat p√• dina √∂nskem√•l',
            'DALL-E skapar vackra bilder - detta tar 2-3 minuter',
            'Kombinerar text och bilder till din sagbok',
            'G√∂r de sista justeringarna'
        ];
        
        if (step < progressMessages.length && loadingSubtext) {
            loadingSubtext.textContent = subtextMessages[step];
            console.log(`üìù Updated subtext: ${subtextMessages[step]}`);
        } else if (!loadingSubtext) {
            console.warn('‚ùå Loading subtext element not found');
        }
    } else {
        console.log('üö´ Loading element not visible, skipping progress update');
    }
}

// Generate story with progress feedback
async function generateStoryWithProgress(storyData) {
    try {
        console.log('üéØ Starting story generation with progress...');
        
        // Update to text generation phase
        updateLoadingProgress('Skapar din personliga saga...', 0);
        
        // Start the API call
        const storyPromise = simpleAPI.generateStory(storyData);
        
        // Show image generation progress after a delay
        setTimeout(() => {
            updateLoadingProgress('Genererar illustrationer med AI...', 1);
        }, 5000);
        
        // Show assembly progress
        setTimeout(() => {
            updateLoadingProgress('S√§tter samman din sagbok...', 2);
        }, 30000);
        
        // Show final progress
        setTimeout(() => {
            updateLoadingProgress('N√§stan klar...', 3);
        }, 50000);
        
        // Wait for the actual result
        const result = await storyPromise;
        console.log('‚úÖ Story generation completed');
        return result;
        
    } catch (error) {
        console.error('‚ùå Story generation failed:', error);
        throw error;
    }
}