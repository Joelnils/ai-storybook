// Global variables
let selectedTheme = '';
let currentStory = null;
let stripe = null;
let elements = null;
let paymentElement = null;

// Theme selection
document.querySelectorAll('.theme-option').forEach(option => {
    option.addEventListener('click', function() {
        // Remove selected class from all options
        document.querySelectorAll('.theme-option').forEach(opt => opt.classList.remove('selected'));
        
        // Add selected class to clicked option
        this.classList.add('selected');
        selectedTheme = this.dataset.theme;
    });
});

// Story generation
document.getElementById('storyForm').addEventListener('submit', function(e) {
    e.preventDefault();
    generateStory();
});

// Initialize Stripe when page loads
document.addEventListener('DOMContentLoaded', async function() {
    try {
        // Get Stripe publishable key from backend
        const response = await api.request('/payments/config');
        const config = response.data;
        
        // Initialize Stripe
        stripe = Stripe(config.publishableKey);
        console.log('‚úÖ Stripe initialized successfully');
    } catch (error) {
        console.error('‚ùå Failed to initialize Stripe:', error);
        // For demo purposes, use a test key if backend is unavailable
        stripe = Stripe('pk_test_51HvQwTxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');
    }
});

async function generateStory() {
    const formData = {
        title: document.getElementById('storyTitle').value,
        childName: document.getElementById('childName').value,
        childAge: document.getElementById('childAge').value,
        theme: selectedTheme,
        details: document.getElementById('storyDetails').value,
        includeImages: true,
        imageStyle: 'cartoon'
    };

    // Validate form first
    if (!formData.title || !formData.childName || !formData.childAge || !selectedTheme) {
        authManager.showNotification('üôã‚Äç‚ôÄÔ∏è Fyll i alla obligatoriska f√§lt och v√§lj ett tema f√∂r din saga!', 'error');
        return;
    }

    // Check authentication first
    if (!api.isAuthenticated()) {
        authManager.showAuthModal();
        return;
    }

    // Show payment modal instead of generating immediately
    showPaymentModal(formData);
}

// Payment Modal Functions
async function showPaymentModal(storyData) {
    // Update payment modal with story details
    document.getElementById('paymentStoryTitle').textContent = `"${storyData.title}"`;
    document.getElementById('paymentStoryDetails').textContent = 
        `Personlig saga f√∂r ${storyData.childName} (${storyData.childAge} √•r) med tema: ${getThemeDisplayName(storyData.theme)}`;
    
    // Show payment modal
    document.getElementById('paymentModal').classList.add('show');
    
    try {
        // Create payment intent on backend
        const response = await api.createCustomStoryPaymentIntent(storyData);
        
        if (response.success) {
            await initializeStripeElements(response.data.clientSecret, storyData, response.data.paymentIntentId);
        } else {
            throw new Error(response.error || 'Failed to create payment intent');
        }
    } catch (error) {
        console.error('Payment setup error:', error);
        closePaymentModal();
        authManager.showNotification('Kunde inte f√∂rbereda betalning. F√∂rs√∂k igen.', 'error');
    }
}

async function initializeStripeElements(clientSecret, storyData, paymentIntentId) {
    if (!stripe) {
        throw new Error('Stripe not initialized');
    }
    
    const isDevelopmentMode = clientSecret.includes('_dev_');
    
    if (isDevelopmentMode) {
        // Development mode: Skip Stripe Elements creation
        console.log('üîß Development mode: Skipping Stripe Elements initialization');
        
        // Hide payment element and show development notice
        const paymentElementContainer = document.querySelector('.payment-element');
        paymentElementContainer.innerHTML = `
            <div style="text-align: center; padding: 2rem; background: #f0f9ff; border: 2px dashed #0ea5e9; border-radius: 10px;">
                <h4 style="color: #0ea5e9; margin-bottom: 1rem;">üîß Development Mode</h4>
                <p style="color: #475569;">Stripe payment skipped for testing</p>
                <p style="color: #64748b; font-size: 0.9rem;">Click "Pay" to proceed with story generation</p>
            </div>
        `;
    } else {
        // Create Elements instance
        elements = stripe.elements({
            clientSecret: clientSecret,
            appearance: {
                theme: 'stripe',
                variables: {
                    colorPrimary: '#7c3aed',
                    colorBackground: '#ffffff',
                    colorText: '#1f2937',
                    colorDanger: '#ef4444',
                    borderRadius: '15px'
                }
            }
        });
        
        // Create and mount Payment Element
        paymentElement = elements.create('payment');
        paymentElement.mount('.payment-element');
    }
    
    // Handle form submission (same for both modes)
    const form = document.getElementById('payment-form');
    form.addEventListener('submit', async (event) => {
        event.preventDefault();
        await handlePaymentSubmission(clientSecret, storyData, paymentIntentId);
    });
}

async function handlePaymentSubmission(clientSecret, storyData, paymentIntentId) {
    const submitButton = document.getElementById('submit-payment');
    submitButton.disabled = true;
    submitButton.textContent = 'Bearbetar...';
    
    // Show payment processing
    document.getElementById('paymentProcessing').classList.add('show');
    
    try {
        // Check if this is a development mode mock payment
        const isDevelopmentMode = clientSecret && clientSecret.includes('_dev_');
        
        let paymentIntent;
        
        if (isDevelopmentMode) {
            // Development mode: Skip Stripe confirmation
            console.log('üîß Development mode: Skipping Stripe payment confirmation');
            paymentIntent = {
                id: paymentIntentId,
                status: 'succeeded'
            };
        } else {
            // Production mode: Confirm payment with Stripe
            if (!elements) {
                throw new Error('Stripe Elements not initialized');
            }
            
            const result = await stripe.confirmPayment({
                elements,
                redirect: 'if_required'
            });
            
            if (result.error) {
                throw result.error;
            }
            
            paymentIntent = result.paymentIntent;
        }
        
        if (paymentIntent.status === 'succeeded') {
            // Payment successful, now generate story
            await generateStoryAfterPayment(paymentIntent.id);
        } else {
            throw new Error('Payment not completed');
        }
    } catch (error) {
        console.error('Payment error:', error);
        
        // Hide payment processing
        document.getElementById('paymentProcessing').classList.remove('show');
        
        // Re-enable submit button
        submitButton.disabled = false;
        submitButton.textContent = 'ü™Ñ Betala och Skapa Saga (‚Ç¨7.99)';
        
        let errorMessage = 'Betalning misslyckades. F√∂rs√∂k igen.';
        if (error.type === 'card_error' || error.type === 'validation_error') {
            errorMessage = error.message;
        }
        
        authManager.showNotification(errorMessage, 'error');
    }
}

async function generateStoryAfterPayment(paymentIntentId) {
    try {
        // Close payment modal and show story generation loading
        closePaymentModal();
        document.getElementById('paymentProcessing').classList.remove('show');
        document.getElementById('loadingAnimation').classList.add('show');
        
        console.log('üîÑ Starting story generation after payment...');
        
        // Generate story using payment confirmation
        const response = await api.generateStoryFromPayment(paymentIntentId);
        
        if (response.success) {
            console.log('‚úÖ Story generated successfully after payment');
            
            // Hide loading and display story
            document.getElementById('loadingAnimation').classList.remove('show');
            displayGeneratedStory(response.data);
            authManager.showNotification('Saga skapad och betald! ‚ú®', 'success');
        } else {
            throw new Error(response.error || 'Story generation failed');
        }
    } catch (error) {
        console.error('Story generation after payment failed:', error);
        
        // Hide loading
        document.getElementById('loadingAnimation').classList.remove('show');
        
        authManager.showNotification('Betalning mottagen men story generation misslyckades. Kontakta support.', 'error');
    }
}

function closePaymentModal() {
    document.getElementById('paymentModal').classList.remove('show');
    
    // Clean up Stripe elements
    if (paymentElement) {
        paymentElement.destroy();
        paymentElement = null;
    }
    if (elements) {
        elements = null;
    }
}

function getThemeDisplayName(theme) {
    const themes = {
        'adventure': '√Ñventyr',
        'fantasy': 'Fantasy', 
        'animals': 'Djur',
        'space': 'Rymden',
        'underwater': 'Havet',
        'friendship': 'V√§nskap'
    };
    return themes[theme] || theme;
}

// Display generated story as a picture book
function displayGeneratedStory(storyData) {
    console.log('Creating picture book for:', storyData);
    
    // Hide everything else
    document.getElementById('loadingAnimation').style.display = 'none';
    document.querySelector('.create-story').style.display = 'none';
    document.getElementById('storyResult').style.display = 'none';
    
    // Create picture book overlay
    createPictureBook(storyData);
}

function createPictureBook(storyData) {
    // Remove existing book if any
    const existingBook = document.getElementById('pictureBook');
    if (existingBook) {
        existingBook.remove();
    }
    
    // Split story into paragraphs (same as backend)
    const paragraphs = storyData.content.split('\n\n').map(p => p.trim()).filter(p => p.length > 0);
    const pages = [];
    
    // Title page with cover image
    const coverImage = storyData.generatedImages && storyData.generatedImages.find(img => 
        img.position === 'cover'
    );
    
    pages.push({
        title: storyData.title || 'Din Magiska Saga',
        subtitle: `En saga f√∂r ${storyData.childName}`,
        content: '',
        isTitle: true,
        image: coverImage
    });
    
    // Story pages (one paragraph per page - matches backend logic)
    for (let i = 0; i < paragraphs.length; i++) {
        const pageContent = paragraphs[i];
        
        if (pageContent) {
            // Find the exact image for this page position (i is the paragraph index, which matches backend)
            const pageImage = storyData.generatedImages && storyData.generatedImages.find(img => 
                img.position === i // Backend uses 0-indexed positions for pages ('cover' is cover)
            );
            
            pages.push({
                content: pageContent,
                pageNumber: i + 1,
                image: pageImage
            });
        }
    }
    
    let currentPage = 0;
    
    // Create book HTML
    const bookHTML = `
        <div id="pictureBook" class="picture-book-overlay">
            <div class="picture-book">
                <button class="book-close" onclick="closePictureBook()">&times;</button>
                <div class="book-pages">
                    <div class="book-page active" id="page-${currentPage}">
                        ${renderPage(pages[0])}
                    </div>
                </div>
                <div class="book-controls">
                    <div class="book-navigation">
                        <button class="page-btn" id="prevBtn" onclick="previousPage()" disabled>‚Üê F√∂reg√•ende</button>
                        <span class="page-counter">Sida 1 av ${pages.length}</span>
                        <button class="page-btn" id="nextBtn" onclick="nextPage()">N√§sta ‚Üí</button>
                    </div>
                    <div class="book-downloads">
                        <button class="download-btn book-download-btn" onclick="downloadPDF()">üìÑ PDF</button>
                        <button class="download-btn book-download-btn" onclick="downloadEPUB()">üìö EPUB</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Add book CSS
    const bookStyle = `
        <style id="picture-book-styles">
        .picture-book-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            animation: fadeIn 0.3s ease;
        }
        
        .picture-book {
            width: 95%;
            max-width: 1000px;
            height: 700px;
            background: #fff;
            border-radius: 20px;
            position: relative;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            overflow: hidden;
        }
        
        .book-close {
            position: absolute;
            top: 15px;
            right: 15px;
            width: 40px;
            height: 40px;
            background: #ff4444;
            color: white;
            border: none;
            border-radius: 50%;
            font-size: 20px;
            cursor: pointer;
            z-index: 1001;
        }
        
        .book-pages {
            height: calc(100% - 90px);
            padding: 0;
            overflow: hidden;
        }
        
        .book-page {
            display: none;
            height: 100%;
            animation: slideIn 0.5s ease;
            position: relative;
        }
        
        .book-page.active {
            display: block;
        }
        
        .page-layout {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
        }
        
        .page-image-section {
            flex: 3;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 75%;
            padding: 0;
            width: 100%;
        }
        
        .page-full-image {
            width: 100%;
            height: 100%;
            object-fit: contain;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }
        
        .page-text-section {
            background: rgba(255, 255, 255, 0.98);
            padding: 1rem 1.5rem;
            text-align: center;
            border-radius: 15px 15px 0 0;
            box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.15);
            min-height: 15%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            margin-top: auto;
        }
        
        .page-text-section.centered {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background: transparent;
            box-shadow: none;
        }
        
        .page-title {
            font-family: 'Fredoka', cursive;
            font-size: 1.8rem;
            color: #1f2937;
            margin-bottom: 0.3rem;
        }
        
        .page-subtitle {
            font-size: 1rem;
            color: #374151;
            margin-bottom: 0.5rem;
        }
        
        .page-content {
            font-size: 1.1rem;
            line-height: 1.5;
            color: #1f2937;
        }
        
        .book-controls {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 80px;
            background: #f8f9fa;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 40px;
        }
        
        .book-navigation {
            display: flex;
            align-items: center;
            gap: 20px;
        }
        
        .book-downloads {
            display: flex;
            gap: 10px;
        }
        
        .book-download-btn {
            background: #10b981;
            font-size: 0.9rem;
            padding: 8px 16px;
        }
        
        .book-download-btn:hover {
            background: #059669;
        }
        
        .page-btn {
            background: #f59e0b;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
        }
        
        .page-btn:hover:not(:disabled) {
            background: #e08c0a;
            transform: translateY(-2px);
        }
        
        .page-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        
        .page-counter {
            font-weight: 500;
            color: #666;
        }
        
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes slideIn {
            from { opacity: 0; transform: translateX(30px); }
            to { opacity: 1; transform: translateX(0); }
        }
        </style>
    `;
    
    // Add to page
    document.head.insertAdjacentHTML('beforeend', bookStyle);
    document.body.insertAdjacentHTML('beforeend', bookHTML);
    
    // Store pages globally for navigation
    window.bookPages = pages;
    window.currentBookPage = 0;
    
    // Store current story
    currentStory = {
        id: storyData.id,
        title: storyData.title,
        content: storyData.content,
        childName: storyData.childName,
        generatedImages: storyData.generatedImages || []
    };
    
    console.log('Picture book created with', pages.length, 'pages');
}

function renderPage(page) {
    if (page.isTitle) {
        if (page.image && page.image.url) {
            return `
                <div class="page-layout">
                    <div class="page-image-section">
                        <img src="${page.image.url}" alt="Cover illustration" class="page-full-image" />
                    </div>
                    <div class="page-text-section">
                        <div class="page-title">${page.title}</div>
                        <div class="page-subtitle">${page.subtitle}</div>
                    </div>
                </div>
            `;
        } else {
            return `
                <div class="page-layout">
                    <div class="page-text-section centered">
                        <div class="page-title">${page.title}</div>
                        <div class="page-subtitle">${page.subtitle}</div>
                        <div style="font-size: 4rem; margin: 2rem;">üìö</div>
                    </div>
                </div>
            `;
        }
    } else {
        if (page.image && page.image.url) {
            return `
                <div class="page-layout">
                    <div class="page-image-section">
                        <img src="${page.image.url}" alt="Story illustration" class="page-full-image" />
                    </div>
                    <div class="page-text-section">
                        <div class="page-content">${page.content}</div>
                    </div>
                </div>
            `;
        } else {
            return `
                <div class="page-layout">
                    <div class="page-text-section centered">
                        <div class="page-content">${page.content}</div>
                        <div style="font-size: 3rem; margin-top: 2rem;">‚ú®</div>
                    </div>
                </div>
            `;
        }
    }
}

function nextPage() {
    if (window.currentBookPage < window.bookPages.length - 1) {
        window.currentBookPage++;
        updateBookPage();
    }
}

function previousPage() {
    if (window.currentBookPage > 0) {
        window.currentBookPage--;
        updateBookPage();
    }
}

function updateBookPage() {
    const pages = document.querySelectorAll('.book-page');
    pages.forEach(page => page.classList.remove('active'));
    
    // Create new page if it doesn't exist
    let currentPageEl = document.getElementById(`page-${window.currentBookPage}`);
    if (!currentPageEl) {
        currentPageEl = document.createElement('div');
        currentPageEl.className = 'book-page';
        currentPageEl.id = `page-${window.currentBookPage}`;
        currentPageEl.innerHTML = renderPage(window.bookPages[window.currentBookPage]);
        document.querySelector('.book-pages').appendChild(currentPageEl);
    }
    
    currentPageEl.classList.add('active');
    
    // Update controls
    document.getElementById('prevBtn').disabled = window.currentBookPage === 0;
    document.getElementById('nextBtn').disabled = window.currentBookPage === window.bookPages.length - 1;
    document.querySelector('.page-counter').textContent = `Sida ${window.currentBookPage + 1} av ${window.bookPages.length}`;
}

function closePictureBook() {
    const book = document.getElementById('pictureBook');
    const styles = document.getElementById('picture-book-styles');
    if (book) book.remove();
    if (styles) styles.remove();
    
    // Show both the story creation and result sections
    document.querySelector('.create-story').style.display = 'block';
    document.getElementById('storyResult').style.display = 'block';
}

// Legacy function for backward compatibility (now removed)
function generateAIStory(formData) {
    // This function is now replaced by the API-based approach
    console.warn('generateAIStory is deprecated. Use displayGeneratedStory instead.');
    
    // Generate story content based on form data (fallback)
    const stories = {
        adventure: {
            content: `En vacker morgon vaknade ${formData.childName} till ljudet av f√•glarnas kvitter. Utanf√∂r f√∂nstret s√•g ${formData.childName} n√•got som bl√§nkte i skogen.

            "Det m√•ste vara n√•got magiskt!" t√§nkte ${formData.childName} och sprang ut f√∂r att unders√∂ka.

            I skogen hittade ${formData.childName} en glittrande karta som ledde till en g√∂md skattkista. Men f√∂r att hitta skatten m√•ste ${formData.childName} l√∂sa tre g√•tor fr√•n skogens visa djur.

            Den f√∂rsta g√•tan kom fr√•n en klok uggla: "Vad blir v√•tare ju mer det torkar?" ${formData.childName} t√§nkte l√§nge och svarade slutligen: "En handduk!" Ugglan nickade och pekade mot √∂ster.

            Efter m√•nga √§ventyr fann ${formData.childName} slutligen skatten - men det var inte guld eller silver. Det var n√•got mycket v√§rdefullare: kunskapen om att mod och v√§nlighet √§r de st√∂rsta skatterna av alla.`,
            illustrations: ['üó∫Ô∏è', 'ü¶â', 'üì¶', '‚ú®']
        },
        fantasy: {
            content: `I en tid l√•ngt, l√§ngt bort levde ${formData.childName} i en magisk v√§rld d√§r enh√∂rningar dansar och draker sjunger.

            En dag uppt√§ckte ${formData.childName} att den magiska kristallen som skyddar landet hade f√∂rsvunnit! Utan den skulle all magi f√∂rsvinna f√∂r alltid.

            ${formData.childName} fick hj√§lp av en v√§nlig drake vid namn Sparkle och tillsammans begav de sig ut p√• en resa f√∂r att hitta kristallen.

            De reste √∂ver regnb√•gsberg och genom molnskog, d√§r de tr√§ffade en vis trollkarl som ber√§ttade att kristallen var g√∂md i M√•nens palats.

            Med mod och v√§nskap lyckades ${formData.childName} och Sparkle r√§dda kristallen och √•terst√§lla magin till landet. Alla firade och ${formData.childName} blev utn√§mnd till landets f√∂rsta unga trollkarl!`,
            illustrations: ['ü¶Ñ', 'üíé', 'üêâ', 'üè∞']
        },
        animals: {
            content: `${formData.childName} bodde p√• en g√•rd med m√•nga djur. En dag m√§rkte ${formData.childName} att n√•got var fel - alla djur s√•g ledsna ut.

            "Vad √§r det som √§r fel?" fr√•gade ${formData.childName} den gamla katten Musse.

            "Vi har tappat bort v√•ra gl√§djetekar," muttrade Musse. "Utan dem kan vi inte skratta eller leka l√§ngre."

            ${formData.childName} best√§mde sig f√∂r att hj√§lpa sina v√§nner. Tillsammans med hunden Rufus, kon Bella och grisen Olle letade de √∂verallt.

            Till slut hittade de gl√§djetekarnas p√• vinden - de hade bara varit blyga och g√∂mde sig! ${formData.childName} √∂vertalade dem att komma tillbaka, och snart var hela g√•rden fylld av skratt och lek igen.`,
            illustrations: ['üê±', 'üêï', 'üê∑', 'üòÑ']
        },
        space: {
            content: `${formData.childName} hade alltid dr√∂mt om att resa till rymden. En kv√§ll n√§r ${formData.childName} tittade p√• stj√§rnorna, h√§nde n√•got magiskt.

            En liten silverraket landade i tr√§dg√•rden! Ur den klev en v√§nlig utomjording vid namn Zipp.

            "Hej ${formData.childName}!" sa Zipp. "Jag beh√∂ver din hj√§lp att hitta tillbaka till min hemplanet Stj√§rnglitter."

            Tillsammans fl√∂g de genom rymden och bes√∂kte fantastiska planeter. P√• Marshmallow-planeten var allt mjukt och s√∂tt, och p√• Regnb√•gsplaneten regnade det f√§rger!

            Till slut hittade de Stj√§rnglitter, och som tack fick ${formData.childName} en magisk stj√§rnsten som alltid skulle p√•minna om deras v√§nskap.`,
            illustrations: ['üöÄ', 'üëΩ', 'üåü', 'ü™ê']
        },
        underwater: {
            content: `${formData.childName} var p√• semester vid havet n√§r n√•got m√§rkligt h√§nde. En vacker havsn√§cka b√∂rjade glittra och pl√∂tsligt kunde ${formData.childName} andas under vattnet!

            Nere i havets djup tr√§ffade ${formData.childName} en v√§nlig delfin vid namn Splash som visade v√§gen till den underbara undervattenstaden Korallheim.

            I staden bodde sj√∂jungfrur, sj√∂h√§star och pratande fiskar. Men staden var i fara - en ledsen havsunge hade r√•kat blockera det magiska vattenfallet som gav staden dess energi.

            ${formData.childName} och Splash hj√§lpte havsungen att flytta de stora stenarna. Som tack fick ${formData.childName} en p√§rla som alltid skulle skydda mot faror fr√•n havet.

            N√§r √§ventyret var √∂ver simmade ${formData.childName} tillbaka till ytan med underbar minnen av v√§nnerna under vattnet.`,
            illustrations: ['üê¨', 'üßú‚Äç‚ôÄÔ∏è', 'üíé', 'üåä']
        },
        friendship: {
            content: `${formData.childName} var ny i staden och k√§nde sig ensam. Den f√∂rsta dagen i den nya skolan satt ${formData.childName} ensam p√• en b√§nk.

            Pl√∂tsligt kom en flicka vid namn Lisa fram. "Vill du leka med mig?" fr√•gade hon med ett v√§nligt leende.

            Lisa visade ${formData.childName} alla de b√§sta platserna p√• skolan - det hemliga tr√§det, den magiska lekplatsen och biblioteket med alla √§ventyrsb√∂cker.

            Snart blev de b√§sta v√§nner och hade s√• roligt tillsammans. De uppt√§ckte att √§ven om de var olika p√• m√•nga s√§tt, hade de samma k√§rlek f√∂r √§ventyr och ber√§ttelser.

            ${formData.childName} ins√•g att det b√§sta √§ventyret av alla √§r att hitta en riktig v√§n. Och fr√•n den dagen var ${formData.childName} aldrig ensam igen.`,
            illustrations: ['üë´', 'üå≥', 'üìö', '‚ù§Ô∏è']
        }
    };

    const storyData = stories[formData.theme] || stories.adventure;
    
    // Display generated story
    document.getElementById('generatedTitle').textContent = formData.title;
    document.getElementById('generatedSubtitle').textContent = `En personlig saga f√∂r ${formData.childName}`;
    
    // Create story content with illustrations
    const paragraphs = storyData.content.split('\n\n');
    let storyHTML = '';
    
    paragraphs.forEach((paragraph, index) => {
        if (paragraph.trim()) {
            storyHTML += `<div class="story-paragraph">${paragraph.trim()}</div>`;
            
            // Add illustration after every other paragraph
            if (index < storyData.illustrations.length) {
                storyHTML += `<div class="story-illustration">${storyData.illustrations[index]}</div>`;
            }
        }
    });
    
    document.getElementById('storyContent').innerHTML = storyHTML;
    document.getElementById('storyResult').style.display = 'block';
    
    // Scroll to result
    document.getElementById('storyResult').scrollIntoView({ behavior: 'smooth' });
    
    // Store current story for download
    currentStory = {
        title: formData.title,
        content: storyHTML,
        childName: formData.childName
    };
}

async function downloadPDF() {
    if (!currentStory || !currentStory.id) {
        authManager.showNotification('Ingen saga att ladda ner', 'error');
        return;
    }

    if (!api.isAuthenticated()) {
        authManager.showAuthModal();
        return;
    }

    try {
        // Show loading state
        const downloadBtn = document.querySelector('.download-btn');
        const originalText = downloadBtn.textContent;
        downloadBtn.textContent = 'Skapar PDF...';
        downloadBtn.disabled = true;

        const response = await api.generatePDF(currentStory.id);
        
        if (response.success) {
            // Create download link
            const link = document.createElement('a');
            link.href = `http://localhost:3001${response.data.downloadUrl}`;
            link.download = response.data.filename;
            link.target = '_blank';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            authManager.showNotification('PDF skapad och nedladdning startad! üì±', 'success');
        }
    } catch (error) {
        console.error('PDF generation error:', error);
        authManager.showNotification('Kunde inte skapa PDF. F√∂rs√∂k igen.', 'error');
    } finally {
        // Reset button
        const downloadBtn = document.querySelector('.download-btn');
        downloadBtn.textContent = 'üì± Ladda ner som PDF';
        downloadBtn.disabled = false;
    }
}

async function downloadEPUB() {
    if (!currentStory || !currentStory.id) {
        authManager.showNotification('Ingen saga att ladda ner', 'error');
        return;
    }

    if (!api.isAuthenticated()) {
        authManager.showAuthModal();
        return;
    }

    try {
        // Show loading state - find the EPUB button specifically
        const downloadBtns = document.querySelectorAll('.download-btn');
        let epubBtn = null;
        downloadBtns.forEach(btn => {
            if (btn.textContent.includes('E-bok')) {
                epubBtn = btn;
            }
        });
        
        if (!epubBtn) {
            throw new Error('Could not find EPUB button');
        }

        const originalText = epubBtn.textContent;
        epubBtn.textContent = 'Skapar E-bok...';
        epubBtn.disabled = true;

        const response = await api.generateEPUB(currentStory.id);
        
        if (response.success) {
            // Create download link
            const link = document.createElement('a');
            link.href = `http://localhost:3001${response.data.downloadUrl}`;
            link.download = response.data.filename;
            link.target = '_blank';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            authManager.showNotification('E-bok skapad och nedladdning startad! üìö', 'success');
        } else {
            throw new Error(response.error || 'Failed to generate EPUB');
        }

    } catch (error) {
        console.error('EPUB generation error:', error);
        authManager.showNotification('Kunde inte skapa e-boken. F√∂rs√∂k igen.', 'error');
    } finally {
        // Reset button state
        const downloadBtns = document.querySelectorAll('.download-btn');
        downloadBtns.forEach(btn => {
            if (btn.textContent.includes('Skapar E-bok')) {
                btn.textContent = 'üìö Ladda ner som E-bok';
                btn.disabled = false;
            }
        });
    }
}

function shareStory() {
    if (!currentStory) return;
    
    alert(`üì§ Dela Din Saga\n\nFantastiskt! Du kan nu dela "${currentStory.title}" med:\n\nüìß Email till familj\nüì± SMS till v√§nner\nüì≤ Sociala medier\nüñ®Ô∏è Skriv ut som bok\n\nSprid magin! ‚ú®`);
}

function createNewStory() {
    // Reset form and hide result
    document.getElementById('storyForm').reset();
    document.querySelectorAll('.theme-option').forEach(opt => opt.classList.remove('selected'));
    selectedTheme = '';
    document.getElementById('storyResult').style.display = 'none';
    document.querySelector('.create-story').style.display = 'block';
    
    // Scroll to form
    document.getElementById('create').scrollIntoView({ behavior: 'smooth' });
}

// Demo stories content
const demoStories = {
    'j√§ttefisken': {
        title: 'Sagan om J√§ttefisken',
        childName: 'Mia',
        content: `Mia stod vid havets kant, tittade ut √∂ver det skimrande vattnet och undrade vad som fanns under ytan. Idag var dagen d√• hon skulle f√• reda p√• det. Utstyrd med simf√∂tter, dykmask och snorkel tog hon sina f√∂rsta f√∂rsiktiga simtag mot √§ventyret.

Medan Mia utforskade det underbara korallriket, m√∂tte hon f√§rgglada fiskar som lekte i vattnet. Hon sv√§vade f√∂rbi anemoner som vajade mjukt i str√∂mmarna och uppt√§ckte skimrande sj√∂stj√§rnor p√• mjuka sandbottnar. D√• s√•g hon n√•got stort som r√∂rde sig i det bl√•.

En enorm j√§ttefisk, med fj√§ll som skimrade i alla regnb√•gens f√§rger, simmade lugnt fram till henne. Mia k√§nde f√∂rst en r√§dsla, men j√§ttefiskens v√§nliga √∂gon visade att den bara var nyfiken. "Hej, jag heter Mia," sa hon. "Och jag √§r en j√§ttefisk," svarade den med en r√∂st som var djup och mild.

J√§ttefisken visade Mia runt i havets underverk. De simmade genom hemliga passager, f√∂rbi gamla skeppsvrak och utforskade koralltr√§dg√•rdar som Mia aldrig hade kunnat f√∂rest√§lla sig. "Havet √§r fullt av hemligheter," sa j√§ttefisken. "Och v√§nskap √§r den st√∂rsta skatten."

N√§r solen b√∂rjade sjunka mot horisonten, visste Mia att det var dags att √•terv√§nda. J√§ttefisken vinkade farv√§l med sin stora stj√§rtfena. "Kom tillbaka snart," sa den. Mia simmade tillbaka till stranden, fylld av tacksamhet och under √∂ver de magiska √§ventyren hon upplevt.

Mia satt p√• stranden och tittade ut √∂ver havet i skymningen. Hon visste att hon alltid skulle b√§ra med sig minnet av j√§ttefisken och de hemliga undervattensv√§rldarna. Och hon visste att mer √§ventyr v√§ntade, bara hon var modig nog att dyka in i det ok√§nda.`,
        illustrations: [
            'http://127.0.0.1:3001/uploads/images/story_image_1755357597627_0.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755357616228_1.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755357630290_2.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755357647783_3.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755357666206_4.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755357696411_5.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755357717355_6.png'
        ]
    },
    'prinsessan': {
        title: 'Prinsessan och Stj√§rnan',
        childName: 'Prinsessan',
        content: `I ett land l√•ngt borta, d√§r himlen alltid var bl√• och solen sken klar, bodde en ung prinsessa vid namn Livia. Hon hade l√•ngt, lockigt h√•r som skimrade i solen och bar alltid en kl√§nning i ljusbl√•tt och silver, f√§rgerna p√• himlen vid daggry.

En kv√§ll, n√§r Livia tittade upp mot stj√§rnorna, s√•g hon en som lyste klarare √§n alla andra. Pl√∂tsligt f√∂ll stj√§rnan ner fr√•n himlen och landade i slottstr√§dg√•rden. Prinsessan sprang ut f√∂r att se var stj√§rnan hade tagit v√§gen och fann d√§r en lysande stj√§rna, inte av eld och gas, utan av n√•got magiskt.

"Hej, jag heter Stella," sa stj√§rnan med en mjuk och v√§nlig r√∂st. "Jag har fallit fr√•n himlen f√∂r att l√§ra mig om v√§nskap p√• jorden." Livia v√§lkomnade Stella med √∂ppna armar och tillsammans b√∂rjade de utforska slottstr√§dg√•rden.

De lekte bland blommorna, pratade med de v√§nliga djuren och delade historier om deras v√§rldar. Livia visade Stella hur vackert livet p√• jorden kunde vara, och Stella l√§rde Livia om stj√§rnornas hemligheter.

En dag, n√§r de vandrade genom skogen, tr√§ffade de en √§ldre kvinna som var vilse. Med Stellas ljus och Livias mod, ledde de kvinnan tillbaka till byn. Tacksamheten i kvinnans √∂gon fick dem att inse v√§rdet av v√§nlighet och hj√§lpsamhet.

N√§r det blev dags f√∂r Stella att √•terv√§nda till himlen, k√§nde Livia en t√•r rinna ner f√∂r kinden. Men Stella lovade att alltid lysa starkt f√∂r henne varje natt. "Titta upp mot stj√§rnorna," sa Stella, "s√• √§r jag alltid hos dig."

Prinsessan Livia l√§rde sig att mod inte bara handlar om att vara stark i farliga stunder, utan ocks√• om att vara v√§nlig och √∂ppna sitt hj√§rta f√∂r nya v√§nner. Och varje natt, n√§r hon tittade upp mot himlen, fann hon tr√∂st i Stellas str√•lande ljus, p√•minnelse om deras of√∂rgl√∂mliga √§ventyr och det eviga bandet mellan dem.`,
        illustrations: [
            'http://127.0.0.1:3001/uploads/images/story_image_1755356828157_0.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755356848661_1.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755356863396_2.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755356877533_3.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755356893863_4.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755356916826_5.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755356931540_6.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755356953596_7.png'
        ]
    },
    'robotkatten': {
        title: 'Robotkatten Max',
        childName: 'Tom',
        content: `Tom satt i sitt rum och ritade n√§r hans mamma kom in med en l√•da. 'Det h√§r √§r till dig, Tom,' sa hon med ett leende. Tom tittade nyfiket p√• l√•dan.

N√§r Tom √∂ppnade l√•dan hoppade en liten robotkatt ut. Den blinkade glatt med sina gr√∂na √∂gon. 'Hej, jag heter Max!' sa den med en mjuk r√∂st. Tom skrattade. Han hade aldrig sett n√•got liknande. 'Hej, Max!' svarade han.

Dagen efter tog Tom med sig Max till parken. Max sprang runt och utforskade allt med stor entusiasm. 'Du √§r s√• snabb!' sade Tom och skrattade. De spelade tills solen b√∂rjade g√• ner.

En dag n√§r de var i parken tr√§ffade de Lisa, en flicka fr√•n Toms skola. 'Vad √§r det d√§r?' fr√•gade hon och pekade p√• Max. Tom f√∂rklarade att Max var en robotkatt. Lisa log. 'Han √§r j√§ttecool. F√•r jag leka med er?' Tom tittade p√• Max, som blinkade glatt. 'Sj√§lvklart,' svarade Tom.

Tillsammans hade de √§nnu roligare. Lisa l√§rde Max att kasta boll, och Max f√∂rs√∂kte l√§ra Lisa att springa lika snabbt som han. De skrattade och lekte tills det blev dags att g√• hem.

Dagen efter i skolan kom fler barn fram till Tom och fr√•gade om Max. Tom k√§nde sig stolt och glad √∂ver att ha en s√• unik v√§n. Han ins√•g att v√§nskap inte handlar om hur man ser ut eller var man kommer ifr√•n, utan om omtanke och gl√§dje man delar med andra.

Fr√•n den dagen var Tom och Max aldrig ensamma. De hade l√§rt sig att v√§nskap v√§xer n√§r man delar den med andra. Och Max, √§ven om han var en robot, hade ett hj√§rta fullt av v√§rme och v√§nlighet.`,
        illustrations: [
            'http://127.0.0.1:3001/uploads/images/story_image_1755358079022_0.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755358100763_1.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755358118466_2.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755358134310_3.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755358155597_4.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755358177993_5.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755358199220_6.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755358215919_7.png'
        ]
    },
    'magiska-skogen': {
        title: 'Den Magiska Skogen',
        childName: 'Emil',
        content: `En solig morgon best√§mde sig Emil f√∂r att utforska skogen bakom sitt hus. Han hade alltid varit nyfiken p√• vad som fanns d√§rinne, men idag k√§nde han sig s√§rskilt √§ventyrslysten.

N√§r han gick djupare in i skogen, b√∂rjade tr√§den skimra i m√§rkliga f√§rger, och blommorna lyste som sm√• lyktor. Emil var f√∂rundrad och k√§nde sig som om han stigit in i en annan v√§rld.

Pl√∂tsligt h√∂rde han en r√∂st som sa, "Hej! Vem √§r du?" Emil tittade ner och s√•g en liten talande ekorre. Han svarade, "Jag heter Emil. √Ñr du en magisk ekorre?" Ekorren nickade och sa, "Alla vi h√§r i den magiska skogen kan prata! F√∂lj med, s√• f√•r du tr√§ffa mina v√§nner!"

Ekorren f√∂rde Emil till en klar gl√§nta d√§r fler djur v√§ntade. Det fanns en bj√∂rn, en r√§v, och till och med en hjort som alla h√§lsade p√• Emil med v√§nliga r√∂ster. Emil kunde knappt tro sina √∂gon!

Djuren ber√§ttade f√∂r Emil om skogens magi, hur de alla lever i harmoni och hj√§lper varandra. Emil l√§rde sig om vikten av v√§nskap och att dela med sig. Han k√§nde sig glad och varm inombords.

Innan det blev dags f√∂r Emil att g√• hem, planterade han en blomma tillsammans med djuren. De sa att blomman skulle v√§xa och p√•minna dem alla om deras nya v√§nskap.

Emil vandrade hem√•t, fylld med gl√§dje och ber√§ttelser att dela med sin familj. Han visste att han alltid skulle vara v√§lkommen tillbaka till den magiska skogen, d√§r v√§nskap blomstrade och √§ventyren aldrig tog slut.`,
        illustrations: [
            'http://127.0.0.1:3001/uploads/images/story_image_1755344743060_0.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755344758196_1.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755344772965_2.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755344788463_3.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755344802860_4.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755344817770_5.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755344832851_6.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755344850357_7.png'
        ]
    },
    'rymd√§ventyr': {
        title: 'Lillas Rymd√§ventyr',
        childName: 'Lilla',
        content: `En kv√§ll n√§r Lilla tittade upp mot himlen glittrade stj√§rnorna extra mycket. "T√§nk om jag kunde bes√∂ka dem," t√§nkte hon. Just d√• blinkade en stj√§rna till, som om den h√∂rde hennes √∂nskan.

N√§sta morgon vaknade Lilla av ett milt ljus som sken genom hennes f√∂nster. Utanf√∂r stod en skimrande rymdfarkost. "√Ñr det f√∂r mig?" undrade Lilla. Just d√• blinkade farkosten till, precis som stj√§rnan kv√§llen innan. Det var dags f√∂r √§ventyr!

Inne i rymdfarkosten fanns en karta √∂ver galaxen med m√§rkena f√∂r magiska platser att bes√∂ka. Den f√∂rsta platsen var Planeta Amicorum, v√§nskapens planet. Med en tryckning p√• startknappen b√∂rjade resan.

N√§r de landade p√• Planeta Amicorum m√∂ttes de av v√§nliga utomjordingar med leenden stora som m√•nar. De bj√∂d in Lilla p√• en fest d√§r alla dansade under glittrande stj√§rnor. "V√§nskap √§r universums spr√•k," sa en av dem till Lilla.

Lillas n√§sta stopp var Planeta Prismatica, en planet som skimrade i alla regnb√•gens f√§rger. H√§r l√§rde sig Lilla att varje f√§rg representerade olika dr√∂mmar och √∂nskningar fr√•n v√§rldens alla h√∂rn.

P√• den tredje planeten, Planeta Risus, h√∂rde Lilla skratt och gl√§djerop s√• snart hon steg ur rymdfarkosten. H√§r lekte barnen lekar som inte kr√§vde annat √§n fantasi. "Gl√§dje √§r frihet," sa en leende v√§n.

Efter att ha bes√∂kt m√•nga fantastiska planeter och m√∂tt otaliga nya v√§nner var det dags f√∂r Lilla att √•terv√§nda hem. Hon fylldes av tacksamhet f√∂r allt hon upplevt och l√§rt sig. Universum var fullt av v√§nner och √§ventyr.

N√§r Lilla kom hem igen k√§nde hon sig f√∂rvandlad. Hon hade med sig en bit av varje planet i sitt hj√§rta och en ny f√∂rst√•else f√∂r vikten av v√§nskap, dr√∂mmar och gl√§dje. "Tack, universum, f√∂r att du visade mig hur stort och v√§nligt du √§r," sa hon innan hon somnade.

Och ute i m√∂rkret, bland alla stj√§rnor, glittrade en extra stark. Det var som om universum sa: "Vars√•god, Lilla. Dr√∂m stort och f√∂r alltid."`,
        illustrations: [
            'http://127.0.0.1:3001/uploads/images/story_image_1755345494463_0.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755345519979_1.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755345539668_2.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755345560114_3.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755345580005_4.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755345604705_5.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755345627040_6.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755345655301_7.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755345686852_8.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755345718077_9.png'
        ]
    },
    'r√§ven': {
        title: 'Sagan om R√§ven',
        childName: 'Joel',
        content: `Joel kn√∂t sina gr√∂na gummist√∂vlar extra h√•rt och lade den r√∂da ryggs√§cken p√• ryggen. Idag skulle han utforska den stora skogen bakom huset. Solen silade genom tr√§dens gr√∂na kronor och visade v√§gen fram√•t, medan f√•glarnas s√•ng v√§lkomnade honom till skogens v√§rld.

Bland h√∂ga tr√§d och mjuka mosstuvor gick Joel p√• uppt√§cktsf√§rd. Pl√∂tsligt h√∂rde han ett litet jamande ljud fr√•n buskarna. N√§r han tittade n√§rmare uppt√§ckte han en liten r√§vunge med fluffig r√∂d p√§ls och nyfikna gula √∂gon som tittade upp p√• honom.

"Hej lilla r√§v," viskade Joel f√∂rsiktigt och str√§ckte ut handen. R√§vungen var f√∂rst lite r√§dd, men Joels v√§nliga r√∂st fick den att k√§nna sig trygg. Snart lekte de tillsammans, rullande runt p√• den mjuka mossan och skrattande √•t varandras uppt√•g.

Joel delade sin mats√§ck med sin nya kompis. De satt p√• en mossbelagd stubbe under ett stort tr√§d och √•t tillsammans. R√§vungen smackade n√∂jt p√• Joels sm√∂rg√•s medan Joel ber√§ttade om alla √§ventyr han dr√∂mt om att uppleva i skogen.

N√§r eftermiddagen √∂vergick i kv√§ll visste Joel att det var dags att s√§ga hejd√•. Han kramade om sin r√§vv√§n och lovade att komma tillbaka snart. "Vi tr√§ffas h√§r imorgon," sa han, och r√§vungen viftade med sin stora fluffiga svans som svar.

N√§sta dag kom Joel tillbaka, och r√§vungen v√§ntade redan. Tillsammans utforskade de djupare in i skogen, d√§r r√§vungen visade Joel hemliga stigar och ber√§ttade genom sin blick om alla skogens under och hemligheter.

N√§r Joel kommer ih√•g detta √§ventyr ler han alltid. F√∂r i skogen l√§rde han sig att v√§nskap kan blomstre √∂verallt, √§ven med de minsta och fluffigaste av v√§nner. Och varje g√•ng han ser skogen vet han att √§ventyr och nya v√§nner v√§ntar p√• honom.

Och s√• forts√§tter Joel och r√§vungen att tr√§ffas, dag efter dag, och uppt√§cker tillsammans skogens alla hemligheter och sk√∂nhet, f√∂renade av en v√§nskap som kommer att vara f√∂r alltid.`,
        illustrations: [
            'http://127.0.0.1:3001/uploads/images/story_image_1755414207280_0.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755414222070_1.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755414237804_2.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755414254060_3.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755414270030_4.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755414287023_5.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755414304779_6.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755414320518_7.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755414338382_8.png'
        ]
    },
    'enh√∂rning': {
        title: 'Enh√∂rningen och Regnb√•gen',
        childName: 'Nova',
        content: `I byns √§nde, d√§r regnb√•gar f√∂ds och stj√§rnor vilar, bodde Nova, en flicka med dr√∂mmar stora som himlen. Hennes hj√§rta var fyllt av √§ventyrslust, och hennes b√§sta v√§n var en vit enh√∂rning vid namn Luna. Tillsammans delade de hemligheter och skratt under det stora bl√•.

En dag, n√§r gr√• moln rullade in och regnet smekte marken, k√§nde Nova en sorgsenhet sprida sig. Allt spel och skoj tycktes f√∂rsvinna med solens ljus. Men Luna, med √∂gon fyllda av magi, viskade, "Efter regnet kommer gl√§djen, l√•t oss hitta den tillsammans." Och s√• begav de sig ut p√• ett √§ventyr.

Genom skogar och √§ngar, under regnb√•gens b√•ge, letade de. Vattenp√∂lar blev till speglar av himlen, och varje droppe ber√§ttade en historia. De skrattade, sprang, och snurrade tillsammans, tillsammans uppt√§ckande v√§rldens f√§rger p√• nytt.

Pl√∂tsligt, i en klar p√∂l omgiven av blommor, speglade sig n√•got magiskt. En regnb√•ge, fast inte som n√•gon annan. Den str√•lade av alla f√§rger, men √§ven av k√§rlek och v√§nskap. Nova och Luna hade skapat sin egen regnb√•ge, med gl√§djen de funnit i varandra.

Medan solen sakta √•terv√§nde och torkade regnets sp√•r, ins√•g Nova att v√§rlden var full av under, √§ven i de enklaste √∂gonblick. Hennes √§ventyr med Luna hade l√§rt henne att efter varje regn, v√§ntar en ny b√∂rjan, fylld med f√§rg och ljus.

Och s√•, varje g√•ng regnet bes√∂kte deras lilla by, visste Nova och Luna att en ny regnb√•ge v√§ntade p√• dem, ett l√∂fte om nya √§ventyr och o√§ndlig gl√§dje. Tillsammans skulle de alltid hitta ljuset, f√∂r√§lskade i livets enkla sk√∂nhet och kraften i deras v√§nskap.`,
        illustrations: [
            'http://127.0.0.1:3001/uploads/images/story_image_1755346368011_0.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755346389852_1.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755346410342_2.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755346432230_3.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755346453817_4.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755346473179_5.png',
            'http://127.0.0.1:3001/uploads/images/story_image_1755346489811_6.png'
        ]
    }
};

function readDemoStory(storyId) {
    console.log('Reading demo story:', storyId);
    
    const story = demoStories[storyId];
    if (!story) {
        console.error('Demo story not found:', storyId);
        return;
    }

    // Create story data in the same format as generated stories
    const paragraphs = story.content.split('\n\n').map(p => p.trim()).filter(p => p.length > 0);
    const generatedImages = story.illustrations.map((url, index) => ({
        id: `demo_${storyId}_img_${index}`,
        url: url,
        prompt: `Demo illustration for ${story.title} page ${index + 1}`,
        position: index === 0 ? 'cover' : Math.min(index - 1, paragraphs.length - 1)
    }));

    const storyData = {
        id: `demo_${storyId}`,
        title: story.title,
        childName: story.childName,
        content: story.content,
        generatedImages: generatedImages,
        wordCount: story.content.split(' ').length,
        readingTimeMinutes: Math.ceil(story.content.split(' ').length / 200),
        createdAt: new Date().toISOString()
    };

    // Display the demo story using the same picture book format
    displayGeneratedStory(storyData);
    
    // Show a notification that this is a demo
    setTimeout(() => {
        authManager.showNotification('üìñ Detta √§r en gratis demo-saga! Skapa din egen personliga saga med AI-generatorn ovan. ‚ú®', 'info');
    }, 1000);
}

async function buyStory(storyId) {
    if (!api.isAuthenticated()) {
        authManager.showAuthModal();
        return;
    }

    try {
        // Get story ID from the card - convert string ID to database ID
        const storyIdMap = {
            'j√§ttefisken': 1,
            'prinsessan': 2,
            'robotkatten': 3,
            'magiska-skogen': 4,
            'rymd√§ventyr': 5,
            'enh√∂rning': 6
        };

        const premadeStoryId = storyIdMap[storyId];
        if (!premadeStoryId) {
            authManager.showNotification('Ogiltigt saga-ID', 'error');
            return;
        }

        // Create payment intent
        const response = await api.createPaymentIntent(premadeStoryId);
        
        if (response.success) {
            // For now, show success message. In production, integrate Stripe Elements
            authManager.showNotification(
                `Betalning f√∂r "${response.data.story.title}" f√∂rbereds! Stripe-integration kommer snart.`, 
                'info'
            );
            
            // TODO: Implement Stripe Elements checkout flow
            console.log('Payment Intent:', response.data);
            
        }
    } catch (error) {
        console.error('Purchase error:', error);
        
        if (error.message.includes('already purchased')) {
            authManager.showNotification('Du har redan k√∂pt denna saga!', 'info');
        } else {
            authManager.showNotification('Kunde inte starta k√∂p. F√∂rs√∂k igen.', 'error');
        }
    }
}

// Smooth scrolling for navigation
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// Add some interactive magic
document.querySelectorAll('.story-illustration').forEach(illustration => {
    illustration.addEventListener('click', function() {
        this.style.animation = 'bounce 0.6s ease';
        setTimeout(() => {
            this.style.animation = 'float 6s infinite ease-in-out';
        }, 600);
    });
});

// Form validation enhancements
document.getElementById('childName').addEventListener('input', function() {
    this.value = this.value.replace(/[^a-zA-Z√•√§√∂√Ö√Ñ√ñ\s]/g, '');
});

// Add sparkle effect to title
setInterval(() => {
    const sparkles = ['‚ú®', '‚≠ê', 'üåü', 'üí´'];
    const randomSparkle = sparkles[Math.floor(Math.random() * sparkles.length)];
    console.log(`${randomSparkle} Magisk saga-skapare aktiv! ${randomSparkle}`);
}, 5000);